#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import numpy as np
import plotly.express as px
import plotly.graph_objects as go

from plotly.subplots import make_subplots

def interactive_lineplot(df, x_col, y_col, color_col=False, xrange=None,
                         yrange=None, custom_y_dict=None, colormap='Set2',
                         frame=None, group=None, y_label='', x_label='',
                         title='', template="plotly_white", kwgs={}):
    """
    Generate an interactive lineplot.

    df :                Dataframe containing columns for x and y
    x/y_col :           Columns names corresponding to x and y
    colormap :          Color scale used to plot heatmap
    x/y_label :         X and Y label for the axis
    frame :             Column name used for animation frame
    group :             Column name used for animation group
    x/yrange :          Min-Max for x or y axis
    title :             Set the title of the figure
    fig_width :         Set the width of figure.
    fig_height :        Set the height of figure.

    Return figure structure that could be save using write_html function.
    """
    fig = px.line(df, x=x_col, y=y_col, animation_frame=frame,
                  color=color_col, range_x=xrange, range_y=yrange,
                  template=template, animation_group=group,
                  color_discrete_map=colormap, title=title, **kwgs)

    fig.update_yaxes(title_text=y_label, visible=True)
    fig.update_xaxes(title_text=x_label, visible=True)

    if custom_y_dict:
        for f in fig.frames:
            if f.name in custom_y_dict:
                f.layout.update(yaxis_range = custom_y_dict[(f.name)])

    return fig


def set_colormap_with_opacity(color_value, n):
    colors = []
    opcacity = np.linspace(0.1, 1, n)
    for i in range(n):
        colors.append(f'rbga({color_value}, {opcacity[i]})')
    return colors


def check_colormap(colormap, n):
    if len(colormap) != n:
        raise ValueError(f'Colormap do not match to number of dataframe. \n'
                         f'You must be provide {n} colors or use '
                         f'generate_colors')


def interactive_ridgeline(multi_df, x_col, y_col, colormap, generate_colors=True,
                          spacing=-0.35, shared_axis=True, tag_name='',
                          template="plotly_white", title='', linewidth=2,
                          fig_height=600, fig_width=900):
    """
    Generates interactive ridge lineplot based on list of dataframe.

    Each element in the dataframe list (multi_df) is used to generate a row
    based on the columns used for x and y. Colormap can be either a list of
    color values corresponding to the number of dataframes in the list:
            colors = ['rgba(254, 200, 64)',
                       rgba(254, 100, 40)',
                       ...,'#ffcccc'] (RGBA ou others)
    OR a rgb values: 254, 200, 64. In this case, generate_colors
    must be True. The colormap will be generated by varying the opacity
    according to the length of the dataframe list.

    multi_df            List of Dataframe.
    x/y_col             Column name used for X and Y-axis.
    colormap            List of colors corresponding to each Dataframe.
    generate_colors     True. Create the list rgba colors with opacity from the 
                        single rgba color parse with colormap.
    spacing             Set the vertical scpacing between subplots (-1,1).
    shared_axis         True. X and Y-axis are shared across columns and row.
    tag_name            Name used to set the legend. {tag_name + idx_dataframe}.
    template            Layout template name from plotly.
    title               Figure title.
    linewidth           Width of line.
    fig_height          Height of figure.
    fig_width           Width of figure.

    Return figure structure that could be save using write_html function.
    """
    nb_row = len(multi_df)
    check_colormap(colormap)
    if generate_colors:
        colors = set_colormap_with_opacity(colormap, nb_row)
    else:
        colors = colormap

    fig = make_subplots(rows=nb_row, vertical_spacing = spacing,
                        shared_xaxes=shared_axis, shared_yaxes=shared_axis)

    for idx, frame in enumerate(multi_df):
        fig.add_trace(go.Scatter(x=frame[x_col], y=frame[y_col],
                                fill='tozeroy', mode='lines',
                                line=dict(width=linewidth, color=colors[idx]),
                                fillcolor=colors[idx],
                                name=f'{tag_name} {idx+1}'),
                      row=idx+1, col=1)

    fig.update_layout(template=template, title_text=title
                      width=fig_width, height=fig_height)

    fig.for_each_xaxis(lambda x: x.update(visible=False,
                                          showgrid=False, zeroline=False))
    fig.for_each_yaxis(lambda x: x.update(visible=False, showgrid=False))
    fig['layout'][f'xaxis{nb_row}'].update(visible=True, zeroline=True)
    fig['layout'][f'xaxis{nb_row}'].update(visible=True)

    fig.update_layout({"paper_bgcolor": "rgba(255, 255, 255, 1)", 
                       "plot_bgcolor": "rgba(0, 0, 0, 0)",})

    return fig

